<h2>Biggest Changes</h2>
We have completely changed the structure of this, instead of one .ipynb file, we are instead using an entire directory and various more splits to represent what is going on.
Sub-directories split more of the major Data Science (more Data Engineering in this case) tasks and have files inside which contain functions necessary to achieve our result of clean dataframes. The benefits of which will be explained as we continue!
<h2>Naming Variables</h2>
Like football, programming is a team sport. On a sizeable project in a company, you will have multiple developers. For example in Data Science, company-dependent, you will have a team of data engineers (their focus is making sure the data is provided to the data scientists in an automated data pipeline) and the data scientists (doing the experiments themselves). 
You write code that is readable and well-documented! This will be a massive help to your colleagues. When on solo projects, it is hard to get a sense of this and what it means. This means to space out your work sensibly, give sensible names to files, directories and variables and try not to have a line that does too much at once! 
Naming variables is tough, it’s tougher to name modules and functions as well. Try to give the best sense of what these things do – one common practice is to begin the names of functions with verbs to get a sense of what they are doing.
<h2>Splitting Code into Functions</h2>
Another good coding practise is to split what your code does into functions. Usually, for testing purposes, you’ll want to make these functions as granular as possible.
What do I mean by that? I mean try to limit each function to doing one task, be it transforming the dataframe, adding columns, pre-processing, any big task that could go wrong later on!
The idea is that we make a file which has all the functions designed for one particular task, for example here, when it comes to loading different tables from the html, I have opted to split transforming the html into json, then made a different file for turning the three jsons we get into pandas dataframes. But how does all this work in conjunction with one another? By using something called modules!
<h2>Typing and docstrings</h2>
In our functions, you will be able to see that there is a massive multi-line string on all of them. This is here to explain the function in detail to anyone who may read it, to give an idea of how to use the function themselves. Additionally, typing is something that lets you know which type the inputs and outputs of the function should be. These are here for additional readability!
<h2>Modules and run.py</h2>
Modules are how we can import various functions from one python script into another python script. Seeing the image provided for run.py, you can see the ‘import’ statements at the top of the page. This is an example of modules in action. By saying from ‘file’ import ‘function’, we can then use a python function we have built in another file. 
This is very helpful for making sure we don’t have one monolith of code (as we did before…) that we are building on and that we are easily able to get lost in. Additionally, building our codebase in a modular way allows us to more easily locate where something may have gone wrong!
run.py takes all the functions that we have built in the other codebases and lets us run them all in the order we want. From data ingestion, to transforming into the dataframes we want. If we were to build models on top of this, we would then put these in new sub-directories as well.
<h2>An Eye Towards Testing</h2>
Usually when bedroom developing, you make something, hope it works, then if it works in your specific use-case, assume it should be fine to work globally. When you are in industry, you want other people to rely on your work and you want to know when/ how things went wrong down the line.
In the bedroom developer case, there’s one user who will see bugs – you! But when there are more users, that is more people to break things. Think of your favourite video games! With thousands upon thousands of people playing them, there’s a much higher chance of glitches and bugs being found! Something that happens for almost every game.
What are some ways you can test? One can be found in the ‘load_json.py’ file, where we use the conditional found near the end. By adding ‘if __name__ == ‘__main__’:’, this means that if we run the file itself, this code will run. However, should we import this as a module into a different python file, this part of the code will not run. This makes it ideal as a zone for a quick test!
The other way is ‘Unit Testing’, a difficult beast to tame. This will have to be covered at a later stage, however the idea with unit testing is to make sure we rigorously test our code to make sure it is not going to break once in a production environment. One package in python, called ‘pytest’ will let you run unit tests within your preferred shell (powershell, ubuntu, etc). It comes with a number of other handy fixtures that I’ll have to document in its own post.
<h2>So are we done with Jupyter Notebooks?</h2>
Definitely not! You can open them up in VS Code by creating a file with a .ipynb file extension. From there, these files are still remarkably helpful to run things quickly and test things will work on the fly. Knowing how to use notebooks effectively is still very much part of the Python developer’s job!
I hope you enjoyed this rejigging of some of my old code and now have some insight into how coding in industry changes when compared to bedroom developing. Admittedly, I had never taken any module in coding at this point, so this could easily be worse-than-average bedroom dev.